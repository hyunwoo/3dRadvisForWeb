{"version":3,"sources":["../../src/radvis.core.js"],"names":["RadvisController","element","data","container","document","getElementById","$","$renderer","width","height","console","log","camera","THREE","PerspectiveCamera","position","z","y","lookAt","scene","Scene","renderer","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","setClearColor","Setting","Radvis","Background","gammaInput","gammaOutput","appendChild","domElement","$canvas","that","groupAxis","Group","groupNode","i","axises","_","forEach","axis","a","name","RadvisAxis","stats","geometryBasket","BufferGeometry","material","LineBasicMaterial","vertexColors","VertexColors","transparent","axisLength","length","axisDestPosition","Float32Array","Geometry","BasketCount","axisDestColor","vertices","colors","indices","addAttribute","BufferAttribute","setDynamic","x","axisColor","Color","Axis","map","Math","sin","PI","index","Radius","cos","setPosition","setColor","createBasketTopBottom","setIndex","Uint16Array","computeBoundingSphere","axisMesh","LineSegments","add","uniforms","color","value","texture","TextureLoader","load","nodeMaterial","ShaderMaterial","vertexShader","textContent","fragmentShader","depthTest","geometryNodes","nodes","numericNodes","nodeCount","nodeDestPositions","nodePositions","nodeDestColors","nodeColors","nodeDestSize","nodeSizes","i3","random","Height","setHSL","NodeSize","Points","updateNodes","controls","OrbitControls","enableZoom","Stats","dom","attr","render","lerp","vector3","Node","scaling","r","g","b","size","axisList","d","push","sortedAxises","sortBy","weightSum","sumBy","active","spacing","weightCurrent","spacing_center","updatePosition","powerSum","v","k","power","node","Vector3","pos","located","setNodePosition","setNodeSize","updateAxis","lastIdx","update","animate","attributes","needsUpdate","customColor","updateProjection","requestAnimationFrame","bind","p","vector","project","__RadvisController","createRadvis","__data"],"mappings":"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","file":"radvis.core.js","sourcesContent":["/**\n * Created by hyunwoo on 2017-02-14.\n */\n\n\n// Line Segment Required\n\n\n// Basket Line Segment : Flex Length\n// Node BufferGeometry : Static Length **\n\n// ** ���Ͽ� ������ �и��Ѵ� **\n\nclass RadvisController {\n    constructor(element, data) {\n        let container = this.container = document.getElementById('rendererRadvis');\n        this.$ = $(this.container);\n        const $renderer = $('#rendererRadvis');\n        const width = this.width = $renderer.width();\n        const height = this.height = $renderer.height();\n        console.log(width, height);\n        let camera = this.camera = new THREE.PerspectiveCamera(45, width / height, 1, 5000);\n        camera.position.z = 1500;\n        camera.position.y = 150;\n        camera.lookAt(0, 0, 0);\n\n        let scene = this.scene = new THREE.Scene();\n\n\n        // set Renderer\n        let renderer = this.renderer = new THREE.WebGLRenderer({antialias: true});\n        renderer.setPixelRatio(window.devicePixelRatio);\n        renderer.setSize(width, height);\n        renderer.setClearColor(Setting.Radvis.Background);\n        renderer.gammaInput = true;\n        renderer.gammaOutput = true;\n\n        container.appendChild(renderer.domElement);\n        this.$canvas = $(renderer.domElement);\n\n\n        // Set Other\n        var that = this;\n        this.data = data;\n        this.groupAxis = new THREE.Group();\n        this.groupNode = new THREE.Group();\n\n        let i;\n        // Axis Data\n        this.axises = {};\n        _.forEach(data.axis, function (a, i) {\n            that.axises[a.name] = new RadvisAxis(that, a, data.stats[a.name]);\n        });\n\n\n        // Axis Geometry\n        this.geometryBasket = new THREE.BufferGeometry();\n        this.material = new THREE.LineBasicMaterial({\n            vertexColors: THREE.VertexColors,\n            transparent: true\n        });\n\n        this.axisLength = data.axis.length;\n        this.axisDestPosition = new Float32Array(this.axisLength * 3 * 2 + Setting.Radvis.Geometry.BasketCount * 6);\n        this.axisDestColor = new Float32Array(this.axisLength * 3 * 2 + Setting.Radvis.Geometry.BasketCount * 6);\n        this.vertices = new Float32Array(this.axisLength * 3 * 2 + Setting.Radvis.Geometry.BasketCount * 6);\n        this.colors = new Float32Array(this.axisLength * 3 * 2 + Setting.Radvis.Geometry.BasketCount * 6);\n        this.indices = [];\n        this.geometryBasket.addAttribute('position', new THREE.BufferAttribute(this.vertices, 3).setDynamic(true));\n        this.geometryBasket.addAttribute('color', new THREE.BufferAttribute(this.colors, 3).setDynamic(true));\n\n        let x, z;\n\n        const axisColor = new THREE.Color(Setting.Radvis.Axis.Color);\n        _.map(this.axises, function (axis) {\n            x = Math.sin(Math.PI * 2 / that.axisLength * axis.axis.index) * Setting.Radvis.Radius;\n            z = Math.cos(Math.PI * 2 / that.axisLength * axis.axis.index) * Setting.Radvis.Radius;\n            axis.setPosition(x, z);\n            axis.setColor(axisColor);\n        });\n\n        this.createBasketTopBottom(axisColor);\n\n        this.geometryBasket.setIndex(new THREE.BufferAttribute(new Uint16Array(this.indices), 1));\n        this.geometryBasket.computeBoundingSphere();\n        this.axisMesh = new THREE.LineSegments(this.geometryBasket, this.material);\n\n        this.groupAxis.add(this.axisMesh);\n\n        // Nodes Data\n\n        // Nodes Geometry\n        const uniforms = {\n            color: {value: new THREE.Color(0xffffff)},\n            texture: {value: new THREE.TextureLoader().load(\"textures/radvis/node.png\")}\n        };\n        this.nodeMaterial = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: document.getElementById('vertexshader').textContent,\n            fragmentShader: document.getElementById('fragmentshader').textContent,\n            depthTest: false,\n            transparent: true\n        });\n\n        console.log(data);\n        this.geometryNodes = new THREE.BufferGeometry();\n\n        this.nodes = data.numericNodes;\n        this.nodeCount = data.numericNodes.length;\n        this.nodeDestPositions = new Float32Array(this.nodeCount * 3);\n        this.nodePositions = new Float32Array(this.nodeCount * 3);\n\n        this.nodeDestColors = new Float32Array(this.nodeCount * 3);\n        this.nodeColors = new Float32Array(this.nodeCount * 3);\n\n        this.nodeDestSize = new Float32Array(this.nodeCount);\n        this.nodeSizes = new Float32Array(this.nodeCount);\n\n        let color = new THREE.Color();\n        var i3;\n        for (i = 0, i3 = 0; i < this.nodeCount; i++, i3 += 3) {\n            this.nodeDestPositions[i3] = ( Math.random() * 2 - 1 ) * Setting.Radvis.Radius;\n            this.nodeDestPositions[i3 + 1] = ( Math.random() * 2 - 1 ) * Setting.Radvis.Height * 0.5;\n            this.nodeDestPositions[i3 + 2] = ( Math.random() * 2 - 1 ) * Setting.Radvis.Radius;\n            color.setHSL(1.0, 0, 0);\n            this.nodeDestColors[i3] = 1;\n            this.nodeDestColors[i3 + 1] = 0;\n            this.nodeDestColors[i3 + 2] = 0;\n            this.nodeSizes[i] = Setting.Radvis.NodeSize;\n        }\n\n        this.geometryNodes.addAttribute('position', new THREE.BufferAttribute(this.nodePositions, 3));\n        this.geometryNodes.addAttribute('customColor', new THREE.BufferAttribute(this.nodeColors, 3));\n        this.geometryNodes.addAttribute('size', new THREE.BufferAttribute(this.nodeSizes, 1));\n\n        this.groupNode = new THREE.Points(this.geometryNodes, this.nodeMaterial);\n\n        console.log(this.geometryNodes);\n        scene.add(this.groupNode);\n        scene.add(this.groupAxis);\n\n        this.updateNodes();\n\n\n        //scene.add(group);\n        let controls = this.controls = new THREE.OrbitControls(camera, renderer.domElement);\n        controls.enableZoom = true;\n        let stats = this.stats = new Stats();\n        $(stats.dom).attr('id', 'radvisStats');\n        container.appendChild(stats.dom);\n\n        this.render();\n\n\n    }\n\n    animate() {\n        let i;\n        for (i = 0; i < this.axisLength * 6; i++) {\n            this.vertices[i] = THREE.Math.lerp(this.vertices[i], this.axisDestPosition[i], 0.1);\n            this.colors[i] = THREE.Math.lerp(this.colors[i], this.axisDestColor[i], 0.1);\n        }\n        for (i = this.axisLength * 6; i < (this.axisLength + Setting.Radvis.Geometry.BasketCount) * 6; i++) {\n            this.colors[i] = THREE.Math.lerp(this.colors[i], this.axisDestColor[i], 0.1);\n        }\n\n        for (i = 0; i < this.nodeCount; i++) {\n            this.nodePositions[i * 3] = THREE.Math.lerp(this.nodePositions[i * 3], this.nodeDestPositions[i * 3], 0.1);\n            this.nodePositions[i * 3 + 1] = THREE.Math.lerp(this.nodePositions[i * 3 + 1], this.nodeDestPositions[i * 3 + 1], 0.1);\n            this.nodePositions[i * 3 + 2] = THREE.Math.lerp(this.nodePositions[i * 3 + 2], this.nodeDestPositions[i * 3 + 2], 0.1);\n\n            this.nodeColors[i * 3] = THREE.Math.lerp(this.nodeColors[i * 3], this.nodeDestColors[i * 3], 0.1);\n            this.nodeColors[i * 3 + 1] = THREE.Math.lerp(this.nodeColors[i * 3 + 1], this.nodeDestColors[i * 3 + 1], 0.1);\n            this.nodeColors[i * 3 + 2] = THREE.Math.lerp(this.nodeColors[i * 3 + 2], this.nodeDestColors[i * 3 + 2], 0.1);\n\n            this.nodePositions[i] = THREE.Math.lerp(this.nodePositions[i], this.nodeDestPositions[i], 0.1);\n        }\n\n    }\n\n    setNodePositionByVector(index, vector3) {\n        this.nodeDestPositions[index * 3] = vector3.x * Setting.Radvis.Node.Geometry.scaling.value;\n        this.nodeDestPositions[index * 3 + 1] = vector3.y * Setting.Radvis.Node.Geometry.scaling.value;\n        this.nodeDestPositions[index * 3 + 2] = vector3.z * Setting.Radvis.Node.Geometry.scaling.value;\n    }\n\n    setNodePosition(index, x, y, z) {\n        this.nodeDestPositions[index * 3] = x * Setting.Radvis.Node.Geometry.scaling.value;\n        this.nodeDestPositions[index * 3 + 1] = y * Setting.Radvis.Node.Geometry.scaling.value;\n        this.nodeDestPositions[index * 3 + 2] = z * Setting.Radvis.Node.Geometry.scaling.value;\n    }\n\n    setNodeColor(index, r, g, b) {\n        this.nodeDestColors[index * 3] = r;\n        this.nodeDestColors[index * 3 + 1] = g;\n        this.nodeDestColors[index * 3 + 2] = b;\n    }\n\n    setNodeSize(index, size) {\n        this.nodeSizes[index] = size * Setting.Radvis.Node.Geometry.size.value;\n    }\n\n    updateAxis() {\n\n        const axisList = [];\n        _.forEach(this.axises, function (d) {\n            axisList.push(d);\n        });\n\n        const sortedAxises = _.sortBy(axisList, function (axis) {\n            return axis.axis.index;\n        });\n\n        const weightSum = _.sumBy(sortedAxises, function (axis) {\n            return axis.axis.active ? axis.axis.spacing : 0;\n        });\n\n        let weightCurrent = 0;\n        _.forEach(sortedAxises, function (axis) {\n            if (axis.axis.active) weightCurrent += axis.axis.spacing * axis.axis.spacing_center * 0.1;\n            axis.updatePosition(weightCurrent, weightSum);\n            if (axis.axis.active) weightCurrent += axis.axis.spacing * (1 - axis.axis.spacing_center * 0.1);\n        });\n    }\n\n    updateNodes() {\n        const that = this;\n        // power sum\n\n        let powerSum = 0;\n        _.forEach(this.nodes[0], function (v, k) {\n            var axis = that.axises[k].axis;\n            if (!axis.active) return;\n            powerSum += axis.power;\n\n        });\n        console.log('axis power sum : ', powerSum);\n\n        //const powerSum = _.sumBy(that.axises[])\n        _.map(this.nodes, function (node, i) {\n\n            var position = new THREE.Vector3();\n\n            let x = 0, y = 0, z = 0;\n            _.forEach(node, function (v, k) {\n                let axis = that.axises[k].axis;\n                if (!axis.active) return;\n\n                let pos = that.axises[k].located(v);\n                // position.add(pos.multiplyScalar(axis.power));\n                x += pos.x * axis.power;\n                y += pos.y * axis.power;\n                z += pos.z * axis.power;\n\n\n            });\n\n\n            that.setNodePosition(i, x / powerSum, y / powerSum, z / powerSum);\n            that.setNodeSize(i, 1);\n        });\n\n    }\n\n\n    adjustAxis() {\n        this.updateAxis();\n        this.updateNodes();\n    }\n\n    updateAxisColor(color) {\n        let i;\n        for (i = this.axisLength; i < this.axisLength + Setting.Radvis.Geometry.BasketCount; i++) {\n            this.axisDestColor[i * 6] = color.r;\n            this.axisDestColor[i * 6 + 1] = color.g;\n            this.axisDestColor[i * 6 + 2] = color.b;\n            this.axisDestColor[i * 6 + 3] = color.r;\n            this.axisDestColor[i * 6 + 4] = color.g;\n            this.axisDestColor[i * 6 + 5] = color.b;\n        }\n        this.updateAxis();\n    }\n\n    createBasketTopBottom(axisColor) {\n        let i, x, z;\n        for (i = this.axisLength; i < this.axisLength + Setting.Radvis.Geometry.BasketCount; i++) {\n            x = Math.sin(Math.PI * 2 / Setting.Radvis.Geometry.BasketCount * i) * Setting.Radvis.Radius;\n            z = Math.cos(Math.PI * 2 / Setting.Radvis.Geometry.BasketCount * i) * Setting.Radvis.Radius;\n\n            this.vertices[i * 6] = x;\n            this.vertices[i * 6 + 1] = -Setting.Radvis.Height / 2;\n            this.vertices[i * 6 + 2] = z;\n            this.vertices[i * 6 + 3] = x;\n            this.vertices[i * 6 + 4] = Setting.Radvis.Height / 2;\n            this.vertices[i * 6 + 5] = z;\n\n            this.axisDestColor[i * 6] = axisColor.r;\n            this.axisDestColor[i * 6 + 1] = axisColor.g;\n            this.axisDestColor[i * 6 + 2] = axisColor.b;\n            this.axisDestColor[i * 6 + 3] = axisColor.r;\n            this.axisDestColor[i * 6 + 4] = axisColor.g;\n            this.axisDestColor[i * 6 + 5] = axisColor.b;\n        }\n        for (i = 0; i < this.axisLength; i++) this.indices.push(i * 2, i * 2 + 1);\n\n        for (i = this.axisLength; i < this.axisLength + Setting.Radvis.Geometry.BasketCount - 1; i++) {\n            this.indices.push(i * 2, i * 2 + 2);\n            this.indices.push(i * 2 + 1, i * 2 + 2 + 1);\n        }\n        let lastIdx = this.axisLength + Setting.Radvis.Geometry.BasketCount - 1;\n        this.indices.push(lastIdx * 2, this.axisLength * 2 + 2);\n        this.indices.push(lastIdx * 2 + 1, this.axisLength * 2 + 2 + 1);\n\n\n    }\n\n    render() {\n        this.controls.update();\n        this.animate();\n        this.geometryBasket.attributes.position.needsUpdate = true;\n        this.geometryBasket.attributes.color.needsUpdate = true;\n\n        this.geometryNodes.attributes.position.needsUpdate = true;\n        this.geometryNodes.attributes.customColor.needsUpdate = true;\n        this.geometryNodes.attributes.size.needsUpdate = true;\n\n        _.forEach(this.axises, function (axis) {\n            axis.updateProjection()\n        });\n\n        this.renderer.render(this.scene, this.camera);\n        this.stats.update();\n        requestAnimationFrame(this.render.bind(this));\n    }\n\n    static projectPosition(camera, x, y, z, width, height) {\n        var p = new THREE.Vector3(x, y, z);\n        var vector = p.project(camera);\n        vector.x = (vector.x + 1) / 2 * width;\n        vector.y = -(vector.y - 1) / 2 * height;\n        return vector;\n    }\n}\n\nlet __RadvisController;\n\n\nfunction createRadvis() {\n    __RadvisController = new RadvisController('#', __data);\n}\n"]}