{"version":3,"sources":["../../src/webgl.test.js"],"names":["group","container","controls","stats","particlesData","camera","scene","renderer","positions","colors","particles","pointCloud","particlePositions","linesMesh","maxParticleCount","particleCount","r","rHalf","effectController","showDots","showLines","minDistance","limitConnections","maxConnections","window","onload","init","animate","initGUI","gui","dat","GUI","add","onChange","value","visible","parseInt","setDrawRange","document","getElementById","THREE","PerspectiveCamera","innerWidth","innerHeight","position","z","Scene","Group","helper","BoxHelper","Mesh","BoxGeometry","material","color","setHex","blending","AdditiveBlending","transparent","segments","Float32Array","pMaterial","PointsMaterial","size","sizeAttenuation","BufferGeometry","i","x","Math","random","y","push","velocity","Vector3","numConnections","addAttribute","BufferAttribute","setDynamic","Points","geometry","computeBoundingSphere","LineBasicMaterial","vertexColors","VertexColors","LineSegments","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","gammaInput","gammaOutput","appendChild","domElement","Stats","dom","addEventListener","onWindowResize","aspect","updateProjectionMatrix","vertexpos","colorpos","numConnected","particleData","j","particleDataB","dx","dy","dz","dist","sqrt","alpha","geometryBasket","attributes","needsUpdate","update","render","requestAnimationFrame","time","Date","now","rotation"],"mappings":";;AAAA,IAAIA,KAAJ;AACA,IAAIC,SAAJ,EAAeC,QAAf,EAAyBC,KAAzB;AACA,IAAIC,gBAAgB,EAApB;AACA,IAAIC,MAAJ,EAAYC,KAAZ,EAAmBC,QAAnB;AACA,IAAIC,SAAJ,EAAeC,MAAf;AACA,IAAIC,SAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,iBAAJ;AACA,IAAIC,SAAJ;AACA,IAAIC,mBAAmB,IAAvB;AACA,IAAIC,gBAAgB,GAApB;AACA,IAAIC,IAAI,GAAR;AACA,IAAIC,QAAQD,IAAI,CAAhB;AACA,IAAIE,mBAAmB;AACnBC,cAAU,IADS;AAEnBC,eAAW,IAFQ;AAGnBC,iBAAa,GAHM;AAInBC,sBAAkB,KAJC;AAKnBC,oBAAgB,EALG;AAMnBR,mBAAe;AANI,CAAvB;;AASAS,OAAOC,MAAP,GAAgB,YAAY;AACxBC;AACAC;AACH,CAHD;;AAKA,SAASC,OAAT,GAAmB;AACf,QAAIC,MAAM,IAAIC,IAAIC,GAAR,EAAV;AACAF,QAAIG,GAAJ,CAAQd,gBAAR,EAA0B,UAA1B,EAAsCe,QAAtC,CAA+C,UAAUC,KAAV,EAAiB;AAC5DvB,mBAAWwB,OAAX,GAAqBD,KAArB;AACH,KAFD;AAGAL,QAAIG,GAAJ,CAAQd,gBAAR,EAA0B,WAA1B,EAAuCe,QAAvC,CAAgD,UAAUC,KAAV,EAAiB;AAC7DrB,kBAAUsB,OAAV,GAAoBD,KAApB;AACH,KAFD;AAGAL,QAAIG,GAAJ,CAAQd,gBAAR,EAA0B,aAA1B,EAAyC,EAAzC,EAA6C,GAA7C;AACAW,QAAIG,GAAJ,CAAQd,gBAAR,EAA0B,kBAA1B;AACAW,QAAIG,GAAJ,CAAQd,gBAAR,EAA0B,gBAA1B,EAA4C,CAA5C,EAA+C,EAA/C,EAAmD,CAAnD;AACAW,QAAIG,GAAJ,CAAQd,gBAAR,EAA0B,eAA1B,EAA2C,CAA3C,EAA8CJ,gBAA9C,EAAgE,CAAhE,EAAmEmB,QAAnE,CAA4E,UAAUC,KAAV,EAAiB;AACzFnB,wBAAgBqB,SAASF,KAAT,CAAhB;AACAxB,kBAAU2B,YAAV,CAAuB,CAAvB,EAA0BtB,aAA1B;AACH,KAHD;AAIH;;AAED,SAASW,IAAT,GAAgB;AACZE;AACA3B,gBAAYqC,SAASC,cAAT,CAAwB,WAAxB,CAAZ;AACA;AACAlC,aAAS,IAAImC,MAAMC,iBAAV,CAA4B,EAA5B,EAAgCjB,OAAOkB,UAAP,GAAoBlB,OAAOmB,WAA3D,EAAwE,CAAxE,EAA2E,IAA3E,CAAT;AACAtC,WAAOuC,QAAP,CAAgBC,CAAhB,GAAoB,IAApB;AACA;AACAvC,YAAQ,IAAIkC,MAAMM,KAAV,EAAR;AACA9C,YAAQ,IAAIwC,MAAMO,KAAV,EAAR;AACAzC,UAAM0B,GAAN,CAAUhC,KAAV;AACA,QAAIgD,SAAS,IAAIR,MAAMS,SAAV,CAAoB,IAAIT,MAAMU,IAAV,CAAe,IAAIV,MAAMW,WAAV,CAAsBnC,CAAtB,EAAyBA,CAAzB,EAA4BA,CAA5B,CAAf,CAApB,CAAb;AACAgC,WAAOI,QAAP,CAAgBC,KAAhB,CAAsBC,MAAtB,CAA6B,QAA7B;AACAN,WAAOI,QAAP,CAAgBG,QAAhB,GAA2Bf,MAAMgB,gBAAjC;AACAR,WAAOI,QAAP,CAAgBK,WAAhB,GAA8B,IAA9B;AACAzD,UAAMgC,GAAN,CAAUgB,MAAV;AACA,QAAIU,WAAW5C,mBAAmBA,gBAAlC;AACAN,gBAAY,IAAImD,YAAJ,CAAiBD,WAAW,CAA5B,CAAZ;AACAjD,aAAS,IAAIkD,YAAJ,CAAiBD,WAAW,CAA5B,CAAT;AACA,QAAIE,YAAY,IAAIpB,MAAMqB,cAAV,CAAyB;AACrCR,eAAO,QAD8B;AAErCS,cAAM,CAF+B;AAGrCP,kBAAUf,MAAMgB,gBAHqB;AAIrCC,qBAAa,IAJwB;AAKrCM,yBAAiB;AALoB,KAAzB,CAAhB;AAOArD,gBAAY,IAAI8B,MAAMwB,cAAV,EAAZ;AACApD,wBAAoB,IAAI+C,YAAJ,CAAiB7C,mBAAmB,CAApC,CAApB;AACA,SAAK,IAAImD,IAAI,CAAb,EAAgBA,IAAInD,gBAApB,EAAsCmD,GAAtC,EAA2C;AACvC,YAAIC,IAAIC,KAAKC,MAAL,KAAgBpD,CAAhB,GAAoBA,IAAI,CAAhC;AACA,YAAIqD,IAAIF,KAAKC,MAAL,KAAgBpD,CAAhB,GAAoBA,IAAI,CAAhC;AACA,YAAI6B,IAAIsB,KAAKC,MAAL,KAAgBpD,CAAhB,GAAoBA,IAAI,CAAhC;AACAJ,0BAAkBqD,IAAI,CAAtB,IAA2BC,CAA3B;AACAtD,0BAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+BI,CAA/B;AACAzD,0BAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+BpB,CAA/B;AACA;AACAzC,sBAAckE,IAAd,CAAmB;AACfC,sBAAU,IAAI/B,MAAMgC,OAAV,CAAkB,CAAC,CAAD,GAAKL,KAAKC,MAAL,KAAgB,CAAvC,EAA0C,CAAC,CAAD,GAAKD,KAAKC,MAAL,KAAgB,CAA/D,EAAkE,CAAC,CAAD,GAAKD,KAAKC,MAAL,KAAgB,CAAvF,CADK;AAEfK,4BAAgB;AAFD,SAAnB;AAIH;AACD/D,cAAU2B,YAAV,CAAuB,CAAvB,EAA0BtB,aAA1B;AACAL,cAAUgE,YAAV,CAAuB,UAAvB,EAAmC,IAAIlC,MAAMmC,eAAV,CAA0B/D,iBAA1B,EAA6C,CAA7C,EAAgDgE,UAAhD,CAA2D,IAA3D,CAAnC;AACA;AACAjE,iBAAa,IAAI6B,MAAMqC,MAAV,CAAiBnE,SAAjB,EAA4BkD,SAA5B,CAAb;AACA5D,UAAMgC,GAAN,CAAUrB,UAAV;AACA,QAAImE,WAAW,IAAItC,MAAMwB,cAAV,EAAf;AACAc,aAASJ,YAAT,CAAsB,UAAtB,EAAkC,IAAIlC,MAAMmC,eAAV,CAA0BnE,SAA1B,EAAqC,CAArC,EAAwCoE,UAAxC,CAAmD,IAAnD,CAAlC;AACAE,aAASJ,YAAT,CAAsB,OAAtB,EAA+B,IAAIlC,MAAMmC,eAAV,CAA0BlE,MAA1B,EAAkC,CAAlC,EAAqCmE,UAArC,CAAgD,IAAhD,CAA/B;AACAE,aAASC,qBAAT;AACAD,aAASzC,YAAT,CAAsB,CAAtB,EAAyB,CAAzB;AACA,QAAIe,WAAW,IAAIZ,MAAMwC,iBAAV,CAA4B;AACvCC,sBAAczC,MAAM0C,YADmB;AAEvC3B,kBAAUf,MAAMgB,gBAFuB;AAGvCC,qBAAa;AAH0B,KAA5B,CAAf;AAKA5C,gBAAY,IAAI2B,MAAM2C,YAAV,CAAuBL,QAAvB,EAAiC1B,QAAjC,CAAZ;AACApD,UAAMgC,GAAN,CAAUnB,SAAV;AACA;AACAN,eAAW,IAAIiC,MAAM4C,aAAV,CAAwB,EAACC,WAAW,IAAZ,EAAxB,CAAX;AACA9E,aAAS+E,aAAT,CAAuB9D,OAAO+D,gBAA9B;AACAhF,aAASiF,OAAT,CAAiBhE,OAAOkB,UAAxB,EAAoClB,OAAOmB,WAA3C;AACApC,aAASkF,UAAT,GAAsB,IAAtB;AACAlF,aAASmF,WAAT,GAAuB,IAAvB;;AAEAzF,cAAU0F,WAAV,CAAsBpF,SAASqF,UAA/B;AACA;AACAzF,YAAQ,IAAI0F,KAAJ,EAAR;AACA5F,cAAU0F,WAAV,CAAsBxF,MAAM2F,GAA5B;;AAEAtE,WAAOuE,gBAAP,CAAwB,QAAxB,EAAkCC,cAAlC,EAAkD,KAAlD;AAEH;;AAED,SAASA,cAAT,GAA0B;AACtB3F,WAAO4F,MAAP,GAAgBzE,OAAOkB,UAAP,GAAoBlB,OAAOmB,WAA3C;AACAtC,WAAO6F,sBAAP;AACA3F,aAASiF,OAAT,CAAiBhE,OAAOkB,UAAxB,EAAoClB,OAAOmB,WAA3C;AACH;;AAED,SAAShB,OAAT,GAAmB;AACf,QAAIwE,YAAY,CAAhB;AACA,QAAIC,WAAW,CAAf;AACA,QAAIC,eAAe,CAAnB;;AAEA,SAAK,IAAIpC,IAAI,CAAb,EAAgBA,IAAIlD,aAApB,EAAmCkD,GAAnC;AACI7D,sBAAc6D,CAAd,EAAiBQ,cAAjB,GAAkC,CAAlC;AADJ,KAGA,KAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIlD,aAApB,EAAmCkD,GAAnC,EAAwC;AACpC;AACA,YAAIqC,eAAelG,cAAc6D,CAAd,CAAnB;AACArD,0BAAkBqD,IAAI,CAAtB,KAA4BqC,aAAa/B,QAAb,CAAsBL,CAAlD;AACAtD,0BAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,KAAgCqC,aAAa/B,QAAb,CAAsBF,CAAtD;AACAzD,0BAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,KAAgCqC,aAAa/B,QAAb,CAAsB1B,CAAtD;AACA,YAAIjC,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+B,CAAChD,KAAhC,IAAyCL,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+BhD,KAA5E,EACIqF,aAAa/B,QAAb,CAAsBF,CAAtB,GAA0B,CAACiC,aAAa/B,QAAb,CAAsBF,CAAjD;AACJ,YAAIzD,kBAAkBqD,IAAI,CAAtB,IAA2B,CAAChD,KAA5B,IAAqCL,kBAAkBqD,IAAI,CAAtB,IAA2BhD,KAApE,EACIqF,aAAa/B,QAAb,CAAsBL,CAAtB,GAA0B,CAACoC,aAAa/B,QAAb,CAAsBL,CAAjD;AACJ,YAAItD,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+B,CAAChD,KAAhC,IAAyCL,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+BhD,KAA5E,EACIqF,aAAa/B,QAAb,CAAsB1B,CAAtB,GAA0B,CAACyD,aAAa/B,QAAb,CAAsB1B,CAAjD;AACJ,YAAI3B,iBAAiBI,gBAAjB,IAAqCgF,aAAa7B,cAAb,IAA+BvD,iBAAiBK,cAAzF,EACI;AACJ;AACA,aAAK,IAAIgF,IAAItC,IAAI,CAAjB,EAAoBsC,IAAIxF,aAAxB,EAAuCwF,GAAvC,EAA4C;AACxC,gBAAIC,gBAAgBpG,cAAcmG,CAAd,CAApB;AACA,gBAAIrF,iBAAiBI,gBAAjB,IAAqCkF,cAAc/B,cAAd,IAAgCvD,iBAAiBK,cAA1F,EACI;AACJ,gBAAIkF,KAAK7F,kBAAkBqD,IAAI,CAAtB,IAA2BrD,kBAAkB2F,IAAI,CAAtB,CAApC;AACA,gBAAIG,KAAK9F,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+BrD,kBAAkB2F,IAAI,CAAJ,GAAQ,CAA1B,CAAxC;AACA,gBAAII,KAAK/F,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,IAA+BrD,kBAAkB2F,IAAI,CAAJ,GAAQ,CAA1B,CAAxC;AACA,gBAAIK,OAAOzC,KAAK0C,IAAL,CAAUJ,KAAKA,EAAL,GAAUC,KAAKA,EAAf,GAAoBC,KAAKA,EAAnC,CAAX;AACA,gBAAIC,OAAO1F,iBAAiBG,WAA5B,EAAyC;AACrCiF,6BAAa7B,cAAb;AACA+B,8BAAc/B,cAAd;AACA,oBAAIqC,QAAQ,MAAMF,OAAO1F,iBAAiBG,WAA1C;AACAb,0BAAU2F,WAAV,IAAyBvF,kBAAkBqD,IAAI,CAAtB,CAAzB;AACAzD,0BAAU2F,WAAV,IAAyBvF,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,CAAzB;AACAzD,0BAAU2F,WAAV,IAAyBvF,kBAAkBqD,IAAI,CAAJ,GAAQ,CAA1B,CAAzB;AACAzD,0BAAU2F,WAAV,IAAyBvF,kBAAkB2F,IAAI,CAAtB,CAAzB;AACA/F,0BAAU2F,WAAV,IAAyBvF,kBAAkB2F,IAAI,CAAJ,GAAQ,CAA1B,CAAzB;AACA/F,0BAAU2F,WAAV,IAAyBvF,kBAAkB2F,IAAI,CAAJ,GAAQ,CAA1B,CAAzB;AACA9F,uBAAO2F,UAAP,IAAqBU,KAArB;AACArG,uBAAO2F,UAAP,IAAqBU,KAArB;AACArG,uBAAO2F,UAAP,IAAqBU,KAArB;AACArG,uBAAO2F,UAAP,IAAqBU,KAArB;AACArG,uBAAO2F,UAAP,IAAqBU,KAArB;AACArG,uBAAO2F,UAAP,IAAqBU,KAArB;AACAT;AACH;AACJ;AACJ;AACDxF,cAAUkG,cAAV,CAAyB1E,YAAzB,CAAsC,CAAtC,EAAyCgE,eAAe,CAAxD;AACAxF,cAAUkG,cAAV,CAAyBC,UAAzB,CAAoCpE,QAApC,CAA6CqE,WAA7C,GAA2D,IAA3D;AACApG,cAAUkG,cAAV,CAAyBC,UAAzB,CAAoC3D,KAApC,CAA0C4D,WAA1C,GAAwD,IAAxD;AACAtG,eAAWoG,cAAX,CAA0BC,UAA1B,CAAqCpE,QAArC,CAA8CqE,WAA9C,GAA4D,IAA5D;AACA9G,UAAM+G,MAAN;AACAC;AACAC,0BAAsBzF,OAAtB;AACH;;AAED,SAASwF,MAAT,GAAkB;AACd,QAAIE,OAAOC,KAAKC,GAAL,KAAa,KAAxB;AACAvH,UAAMwH,QAAN,CAAenD,CAAf,GAAmBgD,OAAO,GAA1B;AACA9G,aAAS4G,MAAT,CAAgB7G,KAAhB,EAAuBD,MAAvB;AAEH","file":"webgl.test.js","sourcesContent":["var group;\r\nvar container, controls, stats;\r\nvar particlesData = [];\r\nvar camera, scene, renderer;\r\nvar positions, colors;\r\nvar particles;\r\nvar pointCloud;\r\nvar particlePositions;\r\nvar linesMesh;\r\nvar maxParticleCount = 1000;\r\nvar particleCount = 500;\r\nvar r = 800;\r\nvar rHalf = r / 2;\r\nvar effectController = {\r\n    showDots: true,\r\n    showLines: true,\r\n    minDistance: 150,\r\n    limitConnections: false,\r\n    maxConnections: 20,\r\n    particleCount: 500\r\n};\r\n\r\nwindow.onload = function () {\r\n    init();\r\n    animate();\r\n};\r\n\r\nfunction initGUI() {\r\n    var gui = new dat.GUI();\r\n    gui.add(effectController, \"showDots\").onChange(function (value) {\r\n        pointCloud.visible = value;\r\n    });\r\n    gui.add(effectController, \"showLines\").onChange(function (value) {\r\n        linesMesh.visible = value;\r\n    });\r\n    gui.add(effectController, \"minDistance\", 10, 300);\r\n    gui.add(effectController, \"limitConnections\");\r\n    gui.add(effectController, \"maxConnections\", 0, 30, 1);\r\n    gui.add(effectController, \"particleCount\", 0, maxParticleCount, 1).onChange(function (value) {\r\n        particleCount = parseInt(value);\r\n        particles.setDrawRange(0, particleCount);\r\n    });\r\n}\r\n\r\nfunction init() {\r\n    initGUI();\r\n    container = document.getElementById('container');\r\n    //\r\n    camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 4000);\r\n    camera.position.z = 1750;\r\n    // controls = new THREE.OrbitControls( camera, container );\r\n    scene = new THREE.Scene();\r\n    group = new THREE.Group();\r\n    scene.add(group);\r\n    var helper = new THREE.BoxHelper(new THREE.Mesh(new THREE.BoxGeometry(r, r, r)));\r\n    helper.material.color.setHex(0x080808);\r\n    helper.material.blending = THREE.AdditiveBlending;\r\n    helper.material.transparent = true;\r\n    group.add(helper);\r\n    var segments = maxParticleCount * maxParticleCount;\r\n    positions = new Float32Array(segments * 3);\r\n    colors = new Float32Array(segments * 3);\r\n    var pMaterial = new THREE.PointsMaterial({\r\n        color: 0xFFFFFF,\r\n        size: 3,\r\n        blending: THREE.AdditiveBlending,\r\n        transparent: true,\r\n        sizeAttenuation: false\r\n    });\r\n    particles = new THREE.BufferGeometry();\r\n    particlePositions = new Float32Array(maxParticleCount * 3);\r\n    for (var i = 0; i < maxParticleCount; i++) {\r\n        var x = Math.random() * r - r / 2;\r\n        var y = Math.random() * r - r / 2;\r\n        var z = Math.random() * r - r / 2;\r\n        particlePositions[i * 3] = x;\r\n        particlePositions[i * 3 + 1] = y;\r\n        particlePositions[i * 3 + 2] = z;\r\n        // add it to the geometryBasket\r\n        particlesData.push({\r\n            velocity: new THREE.Vector3(-1 + Math.random() * 2, -1 + Math.random() * 2, -1 + Math.random() * 2),\r\n            numConnections: 0\r\n        });\r\n    }\r\n    particles.setDrawRange(0, particleCount);\r\n    particles.addAttribute('position', new THREE.BufferAttribute(particlePositions, 3).setDynamic(true));\r\n    // create the particle system\r\n    pointCloud = new THREE.Points(particles, pMaterial);\r\n    group.add(pointCloud);\r\n    var geometry = new THREE.BufferGeometry();\r\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3).setDynamic(true));\r\n    geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3).setDynamic(true));\r\n    geometry.computeBoundingSphere();\r\n    geometry.setDrawRange(0, 0);\r\n    var material = new THREE.LineBasicMaterial({\r\n        vertexColors: THREE.VertexColors,\r\n        blending: THREE.AdditiveBlending,\r\n        transparent: true\r\n    });\r\n    linesMesh = new THREE.LineSegments(geometry, material);\r\n    group.add(linesMesh);\r\n    //\r\n    renderer = new THREE.WebGLRenderer({antialias: true});\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    renderer.gammaInput = true;\r\n    renderer.gammaOutput = true;\r\n\r\n    container.appendChild(renderer.domElement);\r\n    //\r\n    stats = new Stats();\r\n    container.appendChild(stats.dom);\r\n\r\n    window.addEventListener('resize', onWindowResize, false);\r\n\r\n}\r\n\r\nfunction onWindowResize() {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n}\r\n\r\nfunction animate() {\r\n    var vertexpos = 0;\r\n    var colorpos = 0;\r\n    var numConnected = 0;\r\n\r\n    for (var i = 0; i < particleCount; i++)\r\n        particlesData[i].numConnections = 0;\r\n\r\n    for (var i = 0; i < particleCount; i++) {\r\n        // get the particle\r\n        var particleData = particlesData[i];\r\n        particlePositions[i * 3] += particleData.velocity.x;\r\n        particlePositions[i * 3 + 1] += particleData.velocity.y;\r\n        particlePositions[i * 3 + 2] += particleData.velocity.z;\r\n        if (particlePositions[i * 3 + 1] < -rHalf || particlePositions[i * 3 + 1] > rHalf)\r\n            particleData.velocity.y = -particleData.velocity.y;\r\n        if (particlePositions[i * 3] < -rHalf || particlePositions[i * 3] > rHalf)\r\n            particleData.velocity.x = -particleData.velocity.x;\r\n        if (particlePositions[i * 3 + 2] < -rHalf || particlePositions[i * 3 + 2] > rHalf)\r\n            particleData.velocity.z = -particleData.velocity.z;\r\n        if (effectController.limitConnections && particleData.numConnections >= effectController.maxConnections)\r\n            continue;\r\n        // Check collision\r\n        for (var j = i + 1; j < particleCount; j++) {\r\n            var particleDataB = particlesData[j];\r\n            if (effectController.limitConnections && particleDataB.numConnections >= effectController.maxConnections)\r\n                continue;\r\n            var dx = particlePositions[i * 3] - particlePositions[j * 3];\r\n            var dy = particlePositions[i * 3 + 1] - particlePositions[j * 3 + 1];\r\n            var dz = particlePositions[i * 3 + 2] - particlePositions[j * 3 + 2];\r\n            var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\r\n            if (dist < effectController.minDistance) {\r\n                particleData.numConnections++;\r\n                particleDataB.numConnections++;\r\n                var alpha = 1.0 - dist / effectController.minDistance;\r\n                positions[vertexpos++] = particlePositions[i * 3];\r\n                positions[vertexpos++] = particlePositions[i * 3 + 1];\r\n                positions[vertexpos++] = particlePositions[i * 3 + 2];\r\n                positions[vertexpos++] = particlePositions[j * 3];\r\n                positions[vertexpos++] = particlePositions[j * 3 + 1];\r\n                positions[vertexpos++] = particlePositions[j * 3 + 2];\r\n                colors[colorpos++] = alpha;\r\n                colors[colorpos++] = alpha;\r\n                colors[colorpos++] = alpha;\r\n                colors[colorpos++] = alpha;\r\n                colors[colorpos++] = alpha;\r\n                colors[colorpos++] = alpha;\r\n                numConnected++;\r\n            }\r\n        }\r\n    }\r\n    linesMesh.geometryBasket.setDrawRange(0, numConnected * 2);\r\n    linesMesh.geometryBasket.attributes.position.needsUpdate = true;\r\n    linesMesh.geometryBasket.attributes.color.needsUpdate = true;\r\n    pointCloud.geometryBasket.attributes.position.needsUpdate = true;\r\n    stats.update();\r\n    render();\r\n    requestAnimationFrame(animate);\r\n}\r\n\r\nfunction render() {\r\n    var time = Date.now() * 0.001;\r\n    group.rotation.y = time * 0.1;\r\n    renderer.render(scene, camera);\r\n\r\n}\r\n"]}