{"version":3,"sources":["../../src/radvis.data.js"],"names":["__data","DataAxis","name","index","stats","active","spacing","Setting","Radvis","Axis","Geometry","value","spacing_center","uniqueIndex","power","DataSet","csv","mode","_","isNil","injectCsv","replace","rows","split","length","dropRight","keys","raw","map","row","transposRaw","TransposData","numeric","numericKeys","currentInjectAxisCount","forEach","d","values","drop","Number","some","v","isNaN","min","max","sigma","stdDeviation","median","mean","average","Test","AxisLimit","AxisLimitCount","push","console","log","numericNodes","i","out","k","axis","sortBy","axisName","find","matrix","col"],"mappings":"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","file":"radvis.data.js","sourcesContent":["/**\r\n * Created by hyunwoo on 2017-02-15.\r\n */\r\n\r\nlet __data;\r\nclass DataAxis {\r\n    constructor(name, index, stats) {\r\n        this.active = false;\r\n        this.name = name;\r\n        this.spacing = Setting.Radvis.Axis.Geometry.spacing.value;\r\n        this.spacing_center = Setting.Radvis.Axis.Geometry.spacing_center.value;\r\n        this.uniqueIndex = this.index = index;\r\n        this.stats = stats;\r\n        this.power = Setting.Radvis.Axis.Geometry.power.value;\r\n\r\n    }\r\n}\r\n\r\nclass DataSet {\r\n    constructor(csv, mode) {\r\n        if (_.isNil(mode) || mode == 'csv') this.injectCsv(csv);\r\n    }\r\n\r\n    injectCsv(csv) {\r\n        csv = csv.replace(/\\r?\\n|\\r/gi, '\\n');\r\n        var rows = csv.split('\\n');\r\n        if (rows[rows.length - 1] == '')\r\n            rows = _.dropRight(rows);\r\n        this.keys = rows[0].split(',');\r\n        // this.keys = _.take(rows[0].split(','), 15);\r\n        this.raw = _.map(rows, function (row) {\r\n            return row.split(',');\r\n        });\r\n\r\n        this.transposRaw = DataSet.TransposData(this.raw);\r\n        var numeric = this.numeric = {};\r\n        var stats = this.stats = {};\r\n        var numericKeys = this.numericKeys = [];\r\n        var currentInjectAxisCount = 0;\r\n        _.forEach(this.transposRaw, function (d) {\r\n            var values = _.map(_.drop(d), function (d) {\r\n                return Number(d);\r\n            });\r\n\r\n            if (_.some(values, function (v) {\r\n                    return isNaN(v);\r\n                })) {\r\n                return;\r\n            }\r\n\r\n            stats[d[0]] = {\r\n                name: d[0],\r\n                //value: values,\r\n                min: _.min(values),\r\n                max: _.max(values),\r\n                // variance: _.variance(values),\r\n                sigma: _.stdDeviation(values),\r\n                median: _.median(values),\r\n                mean: _.average(values),\r\n            };\r\n            numeric[d[0]] = values;\r\n            // FOR TEST\r\n            if (Setting.Test.AxisLimit) {\r\n                if (currentInjectAxisCount < Setting.Test.AxisLimitCount) {\r\n                    numericKeys.push(d[0]);\r\n                    currentInjectAxisCount++;\r\n                }\r\n            } else numericKeys.push(d[0]);\r\n        });\r\n        console.log(numericKeys);\r\n\r\n        this.numericNodes = [];\r\n        for (var i = 0; i < numeric[numericKeys[0]].length; i++) {\r\n            var out = {};\r\n            _.forEach(this.numericKeys, function (k) {\r\n                out[k] = numeric[k][i];\r\n            });\r\n            this.numericNodes.push(out);\r\n        }\r\n\r\n        this.axis = _.map(this.numericKeys, function (k, i) {\r\n            return new DataAxis(k, i, stats[k]);\r\n        });\r\n    }\r\n\r\n    getSortedAxis() {\r\n        return _.sortBy(this.axis, function (axis) {\r\n            return axis.index;\r\n        })\r\n    }\r\n\r\n    findAxis(axisName) {\r\n        return _.find(this.axis, function (axis) {\r\n            return axis.name == axisName;\r\n        })\r\n    }\r\n\r\n    findAxisByIndex(index) {\r\n        return _.find(this.axis, function (axis) {\r\n            return axis.index == index;\r\n        })\r\n    }\r\n\r\n    static TransposData(matrix) {\r\n        return _.map(matrix[0], function (col, i) {\r\n            return _.map(matrix, function (row) {\r\n                return row[i];\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]}