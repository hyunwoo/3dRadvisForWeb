extends layout
block content
    include includes/uiStatics
    .tabWrapper(oncontextmenu="return false")
        .sideTab.open
            .tabBottom
                .text foxtail Â©
                .tabOpener.i.material-icons chevron_right
        .settingTab.open
            .header-group
                .title
                .closer.i.material-icons(onclick='openSettingTab()') close
                .innerTab
                    .item.active Usage
                        .border
                    .item Geometry
                        .border
                    .item.disable Color
                        .border
            .contents
                .graphics
                .controller
                    .name Node Size
                    .component
                        input(data='setting' type='range', data-name='Radvis NodeSize'
                        update='__RadvisController.updateNodes()' min='5' max='100' step=0.1).slider
                    .desc Lorem Ipsum is simply dummy text of the printing and typesetting industry.
                .controller
                    .name Position Scaling
                    .component
                        input(data='setting' type='range', data-name='Radvis NodeScale'
                        update='__RadvisController.updateNodes()' min='0' max='5' step=0.1 value=1.5).slider
                    .desc Lorem Ipsum is simply dummy text of the printing and typesetting industry.
            .bottom

    //.actions
        .options Axis
            .button#axisColorApplier ASDF
    #rendererRadvis
    //#rendererParallel

    script(src='/setting.js')
    script(src='/radvis.data.js')
    script(src='/radvis.node.js')
    script(src='/radvis.axis.js')
    script(src='/radvis.core.js')
    script(src='/parallel.axis.js')
    script(src='/parallel.core.js')
    link(rel='stylesheet', href='/stylesheets/style.css')

    // Shader Codes
    script(type="x-shader/x-vertex" id="vertexshader").
        attribute float size;
        attribute vec3 customColor;
        varying vec3 vColor;
        void main() {
            vColor = customColor;
            vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
            gl_PointSize = size * ( 300.0 / -mvPosition.z );
            gl_Position = projectionMatrix * mvPosition;
        }

    script(type="x-shader/x-fragment" id="fragmentshader").
        uniform vec3 color;
        uniform sampler2D texture;
        varying vec3 vColor;
        void main() {
            gl_FragColor = vec4( color * vColor, 1.0 );
            gl_FragColor = gl_FragColor * texture2D( texture, gl_PointCoord );
        }

    script.


    style.




